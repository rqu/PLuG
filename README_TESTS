Overview
========

Tests are implemented using JUnit. There are classic unit tests that are
located in the ch.usi.dag.disl.test.junit package and complex tests in the
ch.usi.dag.disl.test.suite package that invoke all parts of the framework
(client, server, ...) and verify computed results.

All tests are executed by running
$ ant test

To use the tests for debuging purposes during development, a single test suite
(for example, "after") can be executed by running
$ ant test -Dtest.name=after

Properties passed to Ant on the command line starting with "-Ddisl.",
"-Ddislserver.", and "-Ddislreserver." are passed to the test. For example,
to save the outputs produced by the test suites, use

-Ddisl.test.verbose=true

When built with "ant prepare-test" tests can be also run directly. They are
packed in the "build-test" directory.


Implementation
==============

Implementation is a bit tricky in few aspects. 

Firstly, building of suite test apps and instrumentations is handled by a
scripted target that lists all directories in a "ch.usi.dag.disl.test.suite"
package, and produces "app" and "inst" jars for each suite.

Secondly, when running the instances of client and server using Process API,
never forget to clear environment variables as inherited classpath could cause
serious trouble.

If a suite instr source directory contains a manifest file, it will be used
when packaging the instrumentation into a jar, otherwise a default manifest
will be used, with the "DiSL-Classes" attribute set to "DiSLClass".
