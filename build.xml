<project name="disl" default="build" basedir=".">

	<property file="disl.version" />
	<property file="build.properties" />


	<path id="asm.classpath">
		<pathelement location="${asm.path}" />
	</path>

	<path id="junit.classpath">
		<pathelement location="${junit.core.path}" />
		<pathelement location="${junit.hamcrest.path}" />
	</path>


	<path id="util.classpath">
		<pathelement location="${build.util}" />
	</path>

	<path id="disl.classpath">
		<pathelement location="${build.disl}" />
	</path>

	<path id="disl.bypass.classpath">
		<pathelement location="${build.disl.bypass}/always" />
	</path>

	<path id="shvm.classpath">
		<pathelement location="${build.shvm}" />
		<pathelement location="${build.shvm.dispatch}" />
	</path>


	<path id="classpath">
		<pathelement location="${build.disl}" />
		<pathelement location="${asm.path}" />
		<pathelement location="${junit.core.path}" />
		<pathelement location="${junit.hamcrest.path}" />
	</path>


	<!-- Initialization -->

	<target name="init">
		<!--
			Define additional tasks from ant-contrib.
		-->
		<taskdef resource="${ant-contrib.resource}">
			<classpath>
				<pathelement location="${ant-contrib.path}" />
			</classpath>
		</taskdef>

		<!--
			Determine the names of native agent libraries.
			Mac OS X (Darwin) is considered a Unix family.
		-->
		<if>
			<os family="windows" />
			<then>
				<property name="dl.prefix" value="" />
				<property name="dl.suffix" value=".dll" />
			</then>
			<else><if>
				<os family="unix" />
				<then>
					<property name="dl.prefix" value="lib" />
					<if>
						<os family="mac" />
						<then>
							<property name="dl.suffix" value=".jnilib" />
						</then>
						<else>
							<property name="dl.suffix" value=".so" />
						</else>
					</if>
				</then>
				<else>
					<fail message="Unsupported operating system: ${os.name}" />
				</else>
			</if></else>
		</if>

		<property name="disl.agent.lib" value="${dl.prefix}dislagent${dl.suffix}" />
		<property name="shvm.agent.lib" value="${dl.prefix}dislreagent${dl.suffix}" />

		<!--
			Create initial build directories.
		-->
		<mkdir dir="${build}" />
		<mkdir dir="${build.disl}" />
		<mkdir dir="${dist.lib}" />
	</target>


	<!-- DiSL bypass -->

	<target name="compile-tlvi" depends="init">
		<mkdir dir="${build.disl}" />
		<javac srcdir="${src.disl}" includes="ch/usi/dag/disl/utilinstr/tlvinserter/" destdir="${build.disl}" includeAntRuntime="false">
			<classpath>
				<path refid="asm.classpath" />
			</classpath>
		</javac>
	</target>


	<target name="create-disl-thread" depends="compile-tlvi">
		<mkdir dir="${build.disl.thread}" />
		<java fork="true" classname="ch.usi.dag.disl.utilinstr.tlvinserter.ExtendThread">
			<classpath>
				<path refid="disl.classpath" />
				<path refid="asm.classpath" />
			</classpath>
			<arg value="${basedir}/${build.disl.thread}" />
		</java>
	</target>


	<target name="compile-disl-bypass" depends="create-disl-thread">
		<mkdir dir="${build.disl.bypass}" />
		
		<mkdir dir="${build.disl.bypass}/always" />
		<javac srcdir="${src.disl.bypass}" destdir="${build.disl.bypass}/always" debug="true" includeAntRuntime="false">
			<compilerarg value="-Xbootclasspath/p:${basedir}/${build.disl.thread}" />
		</javac>

		<mkdir dir="${build.disl.bypass}/dynamic" />
		<javac srcdir="${src.disl.bypass.dynamic}" destdir="${build.disl.bypass}/dynamic" debug="true" includeAntRuntime="false">
			<classpath>
				<path refid="disl.bypass.classpath" />
			</classpath>
		</javac>
	</target>


	<!-- DiSL Java agent -->

	<target name="compile-disl-agent-java" depends="compile-disl-bypass">
		<mkdir dir="${build.disl.agent.java}" />
		<javac srcdir="${src.disl.agent.java}" destdir="${build.disl.agent.java}" debug="true" includeAntRuntime="false">
			<classpath>
				<path refid="disl.bypass.classpath" />
			</classpath>
		</javac>
	</target>


	<target name="package-disl-agent-java" depends="compile-disl-agent-java">
		<jar destfile="${dist.lib}/disl-agent.jar">
			<fileset dir="${build.disl.agent.java}" />
			<fileset dir="${build.disl.bypass}/always" />
			<mappedresources>
				<fileset dir="${build.disl.bypass}/dynamic" />
				<globmapper from="*/DynamicBypassCheck.class" to="DynamicBypassCheck-AfterBootstrap.class" />
			</mappedresources>
			<manifest>
				<attribute name="Premain-Class" value="ch.usi.dag.dislagent.DiSLAgent" />
				<attribute name="Can-Redefine-Classes" value="true" />
				<attribute name="DiSL-Version" value="${disl.version}" />
			</manifest>
		</jar>
	</target>


	<!-- Shared utility code -->

	<target name="compile-util" depends="init">
		<mkdir dir="${build.util}" />
		<javac srcdir="${src.util}" destdir="${build.util}" debug="true" includeAntRuntime="false" />
	</target>


	<!-- DiSL -->

	<target name="compile-disl" depends="compile-disl-bypass,compile-util">
		<javac srcdir="${src.disl}" destdir="${build.disl}" debug="true" includeAntRuntime="false">
			<classpath>
				<!-- path refid="util.classpath" / -->
				<path refid="disl.classpath" />
				<path refid="disl.bypass.classpath" />
				<path refid="asm.classpath" />
			</classpath>
		</javac>
	</target>


	<target name="package-disl" depends="compile-disl">
		<jar destfile="${dist.lib}/disl-server.jar">
			<manifest>
				<attribute name="Class-Path" value="${asm.lib}" />
				<attribute name="Main-Class" value="ch.usi.dag.dislserver.DiSLServer" />
				<attribute name="DiSL-Version" value="${disl.version}" />
			</manifest>

			<!-- fileset dir="${build.util}" includes="**/*" / -->
			<fileset dir="${build.disl}" includes="**/*" excludes="**/ExtendThread.class" />
			<fileset dir="${build.disl.bypass}/always" includes="**/*" />
		</jar>
	</target>


	<!-- DiSL agent -->

	<target name="compile-disl-agent" depends="init">
		<exec executable="make" dir="${src.disl.agent}/javahome" />
		<exec executable="make" dir="${src.disl.agent}" />
	</target>


	<target name="copy-disl-agent" depends="compile-disl-agent">
		<copy file="${src.disl.agent}/${dl.prefix}dislagent${dl.suffix}" todir="${dist.lib}" />
	</target>


	<!-- Shadow VM -->

	<target name="compile-shvm" depends="init">
		<mkdir dir="${build.shvm}" />
		<javac srcdir="${src.shvm}" destdir="${build.shvm}" debug="true" includeAntRuntime="false">
			<classpath>
				<path refid="asm.classpath" />
			</classpath>
		</javac>
	</target>


	<target name="package-shvm" depends="compile-shvm">
		<jar basedir="${build.shvm}" destfile="${dist.lib}/dislre-server.jar" includes="ch/usi/dag/**">
			<manifest>
				<attribute name="Class-Path" value="${asm.lib}" />
				<attribute name="Main-Class" value="ch.usi.dag.dislreserver.DiSLREServer" />
				<attribute name="DiSL-Version" value="${disl.version}" />
			</manifest>
		</jar>
	</target>


	<target name="compile-shvm-dispatch" depends="init">
		<mkdir dir="${build.shvm.dispatch}" />
		<javac srcdir="${src.shvm.dispatch}" destdir="${build.shvm.dispatch}" debug="true" includeAntRuntime="false" />
	</target>


	<target name="package-shvm-dispatch" depends="compile-shvm-dispatch">
		<jar basedir="${build.shvm.dispatch}" destfile="${dist.lib}/dislre-dispatch.jar" includes="ch/usi/dag/**" />
	</target>


	<!-- Shadow VM agent -->

	<target name="compile-shvm-agent">
		<exec executable="make" dir="${src.shvm.agent}/javahome" />
		<exec executable="make" dir="${src.shvm.agent}" />
	</target>


	<target name="copy-shvm-agent" depends="compile-shvm-agent">
		<copy file="${src.shvm.agent}/${dl.prefix}dislreagent${dl.suffix}" todir="${dist.lib}" />
	</target>


	<!-- JUnit tests and DiSL/Shadow VM test suites -->

	<target name="compile-test" depends="compile-util,compile-disl,compile-shvm,compile-shvm-dispatch">
		<mkdir dir="${build.test}" />
		<javac srcdir="${src.test}" destdir="${build.test}" debug="true" includeAntRuntime="false" >
			<classpath>
				<path refid="util.classpath" />
				<path refid="disl.classpath" />
				<path refid="shvm.classpath" />
				<path refid="junit.classpath" />
				<path refid="asm.classpath" />
			</classpath>
		</javac>

		<!-- Copy test resource files from source to class output directory. -->
		<copy todir="${build.test}">
			<fileset dir="${src.test}">
				<include name="**/*.resource" />
			</fileset>
		</copy>
	</target>


	<macrodef name="package2path">
		<attribute name="package" />
		<attribute name="property" />
		<sequential>
			<pathconvert property="@{property}">
				<path path="@{package}" />
				<mapper type="unpackage" from="${basedir}/*" to="*" />
			</pathconvert>
		</sequential>
	</macrodef>


	<target name="package-test" depends="compile-test">
		<mkdir dir="${build.test.jars}" />
		<property name="suite.base.pkg" value="ch.usi.dag.disl.test.suite" />
		<package2path package="${suite.base.pkg}" property="suite.base.path" />

		<condition property="test.suites" value="${test.name}" else="*">
			<isset property="test.name" />
		</condition>

		<for param="suite.path">
			<path>
				<dirset dir="${src.test}/${suite.base.path}">
					<include name="${test.suites}" />
				</dirset>
			</path>
			<sequential>
				<local name="suite.name" />
				<basename file="@{suite.path}" property="suite.name" />
				<antcall target="package-test-suite">
					<param name="test.suite.name" value="${suite.name}" />
					<param name="test.suite.path" value="${suite.base.path}/${suite.name}" />
					<param name="test.suite.pkg" value="${suite.base.pkg}.${suite.name}" />
				</antcall>
			</sequential>
		</for>
	</target>


	<target name="package-test-suite">
		<!--
			Package target application classes.
		-->
		<jar jarfile="${build.test.jars}/${test.suite.name}-app.jar" basedir="${build.test}">
			<include name="${test.suite.path}/app/**" />
			<manifest>
				<attribute name="Main-Class" value="${test.suite.pkg}.app.TargetClass" />
			</manifest>
		</jar>

		<!--
			Package instrumentation classes.
		-->
		<property name="inst.jar" value="${build.test.jars}/${test.suite.name}-inst.jar" />
		<property name="inst.manifest" value="${test.suite.path}/instr/MANIFEST.MF" />

		<fileset id="inst.files" dir="${build.test}">
			<include name="${test.suite.path}/instr/**" />
			<exclude name="${inst.manifest}" />
		</fileset>

		<!--
			If the suite has a MANIFEST.MF, use it when creating the instrumentation
			jar file, otherwise generate a manifest with a default DiSL class.
		-->
		<if>
			<available file="${src.test}/${inst.manifest}" />
			<then>
				<jar jarfile="${inst.jar}" manifest="${src.test}/${inst.manifest}">
					<fileset refid="inst.files" />
				</jar>
			</then><else>
				<jar jarfile="${inst.jar}">
					<fileset refid="inst.files" />
					<manifest>
						<attribute name="DiSL-Classes" value="${test.suite.pkg}.instr.DiSLClass" />
					</manifest>
				</jar>
			</else>
		</if>
	</target>


	<target name="test" depends="package,package-test" description="Runs all tests or a selected (-Dtest.name=...) test suite.">
		<!--
			If test.name is set to a name of a test suite, only include the test suite
			in the batch of tests to be run, otherwise include all tests and suites.
		-->
		<if>
			<isset property="test.name" />
			<then>
				<echo>Running a single test suite: ${test.name}</echo>
				<fileset id="test.batch" dir="${src.test}">
					<include name="*ch/usi/dag/disl/test/suite/${test.name}/junit/*Test.java" />
				</fileset>
			</then><else>
				<echo>Running all tests.</echo>
				<fileset id="test.batch" dir="${src.test}">
					<include name="ch/usi/dag/disl/test/junit/*Test.java" />
					<include name="ch/usi/dag/disl/test/suite/*/junit/*Test.java" />
				</fileset>
			</else>
		</if>

		<!--
			Run the batch of junit tests and junit-wrapped test suites.
		-->
		<junit haltonfailure="no" haltonerror="no" failureproperty="junit.failure">
			<formatter type="brief" usefile="false" />

			<classpath>
				<path refid="asm.classpath" />
				<path refid="junit.classpath" />
				<pathelement location="${build.test}" />
				<pathelement location="${build.util}" />
				<pathelement location="${build.disl}" />
				<pathelement location="${build.shvm}" />
			</classpath>

			<!-- allow "disl.", "dislserver.", and "dislreserver." properties to be passed to tests -->
			<syspropertyset>
				<propertyref prefix="disl." />
				<propertyref prefix="dislserver." />
				<propertyref prefix="dislreserver." />
			</syspropertyset>
			
			<sysproperty key="disl.lib.dir" value="${dist.lib}" />
			<sysproperty key="test.lib.dir" value="${build.test.jars}" />
			<sysproperty key="disl.agent.lib" value="${disl.agent.lib}" />
			<sysproperty key="shvm.agent.lib" value="${shvm.agent.lib}" />

			<batchtest fork="yes">
				<fileset refid="test.batch" />
			</batchtest>
		</junit>
	</target>


	<!-- Eclipse support -->

	<target name="package-eclipse-agent" depends="init">
		<jar jarfile="${out.dir}/eclipse-agent.jar">
			<manifest>
				<attribute name="Premain-Class" value="ch.usi.dag.disl.testtools.agent.Agent" />
			</manifest>
		</jar>
	</target>


	<target name="package-eclipse-bypass" depends="compile-disl-bypass">
		<jar destfile="${out.dir}/eclipse-dynamicbypass.jar">
			<fileset dir="${build.disl.bypass}/always" />
		</jar>
	</target>


	<!-- Documentation -->

	<target name="build-doc" depends="init">
		<delete dir="${build.doc.intro}" />
		<copy todir="${build.doc.intro}">
			<fileset dir="${src.doc.intro}" />
		</copy>
		<exec executable="rubber" dir="${build.doc.intro}">
			<arg value="--pdf" />
			<arg value="dislintro.tex" />
		</exec>

		<mkdir dir="${dist.doc.intro}" />
		<copy file="${build.doc.intro}/dislintro.pdf" todir="${dist.doc.intro}" />
	</target>


	<target name="build-jdoc" depends="compile">
		<mkdir dir="${dist.doc.jdoc}" />
		<javadoc destdir="${dist.doc.jdoc}"
			access="public" author="true" version="true" use="true" 
			nodeprecated="false" nodeprecatedlist="false"
			noindex="false" splitindex="true" nonavbar="false" notree="false"
			overview="${src.doc.jdoc}/overview.html"
			source="1.7"
		>
			<sourcepath>
				<pathelement path="${src.disl}" />
			</sourcepath>

			<sourcefiles>
				<fileset dir="${src.disl}">
					<include name="**/DiSL.java" />
					<include name="**/Scope.java" />
					<include name="**/ScopeImpl.java" />
					<include name="**/Shadow.java" />
				</fileset>
				<fileset dir="${src.disl.bypass}">
					<include name="**/DynamicBypass.java" />
				</fileset>
			</sourcefiles>

			<classpath>
				<path refid="disl.bypass.classpath" />
				<path refid="asm.classpath" />
			</classpath>

			<package name="ch.usi.dag.disl.annotation" />
			<package name="ch.usi.dag.disl.marker" />
			<package name="ch.usi.dag.disl.guardcontext" />
			<package name="ch.usi.dag.disl.staticcontext" />
			<package name="ch.usi.dag.disl.dynamiccontext" />
			<package name="ch.usi.dag.disl.classcontext" />
			<package name="ch.usi.dag.disl.processorcontext" />
			<package name="ch.usi.dag.disl.transformer" />
		</javadoc>
	</target>


	<!-- Miscellaneous -->

	<target name="copy-asm">
		<copy file="${asm.path}" tofile="${dist.lib}/${asm.lib}" />
	</target>

	<target name="copy-examples">
		<copy todir="${dist.bin}">
			<fileset dir="${src.bin}" />
		</copy>
		<chmod perm="ugo+x" type="file">
			<fileset dir="${dist.bin}" />
		</chmod>

		<copy todir="${dist.examples}">
			<fileset dir="${src.examples}" />
		</copy>
	</target>

	<target name="copy-misc">
		<copy todir="${dist}" flatten="true">
			<resources>
				<file file="COPYING" />
				<file file="README" />
				<file file="USER_ERRORS" />
			</resources>
		</copy>
	</target>

	<target name="package-src">
		<zip destfile="${dist}/src.zip">
			<zipfileset dir="${src.disl}" />
			<zipfileset dir="${src.disl.bypass}" />
			<zipfileset dir="${src.shvm}" />
			<zipfileset dir="${src.shvm.dispatch}" />
			<zipfileset dir="${src.util}" />
		</zip>
	</target>


	<!-- Releases -->

	<target name="release-bin"> 
		<zip destfile="${release.bin.zip}">
			<zipfileset dir="${dist}" />
		</zip>

		<tar destfile="${release.bin.tar}" compression="bzip2">
			<zipfileset src="${release.bin.zip}" />
		</tar>
	</target>


	<target name="release-src">
		<zip destfile="${release.src.zip}">
			<zipfileset prefix="disl-${disl.version}" dir=".">
				<include name="bin/" />
				<include name="doc/" />
				<include name="examples/" />
				<include name="lib/*.jar" />
				<include name="lib/*.txt" />
				<include name="COPYING" />
				<include name="README" />
				<include name="README_TESTS" />
				<include name="USER_ERRORS" />
				<include name="build.properties" />
				<include name="build.xml" />
				<include name="disl.version" />
				<include name=".settings/" />
				<include name=".project" />
				<include name=".classpath" />
				<include name="eclipse.*" />
			</zipfileset>
			<zipfileset prefix="disl-${disl.version}" dir="." includes="src*/" excludes="**/var,**/find.sh,**/*.so,**.jnilib,**/*.o" />
			<zipfileset prefix="disl-${disl.version}" dir="." includes="src*/**/find.sh" filemode="755" />
		</zip>

		<tar destfile="${release.src.tar}" compression="bzip2">
			<zipfileset src="${release.src.zip}" />
		</tar>
	</target>


	<!-- Summary targets -->

	<target name="compile" depends="compile-disl,compile-disl-agent,compile-disl-agent-java,compile-shvm,compile-shvm-agent" description="Compiles DiSL and Shadow VM" />

	<target name="package" depends="package-disl,copy-disl-agent,package-disl-agent-java,package-shvm,copy-shvm-agent,package-shvm-dispatch,copy-asm,copy-examples" description="Packages DiSL and Shadow VM" />

	<target name="eclipse" depends="package-eclipse-agent,package-eclipse-bypass" description="Creates supporting libraries for DiSL development under Eclipse" />

	<target name="build" depends="compile,package,build-doc,build-jdoc" />

	<target name="release" depends="build,package-src,copy-misc,release-bin,release-src" />


	<!-- Clean up -->

	<target name="clean">
		<delete dir="${out.dir}" />

		<exec executable="make" dir="${src.disl.agent}/javahome">
			<arg value="clean" />
		</exec>
		<exec executable="make" dir="${src.disl.agent}">
			<arg value="clean" />
		</exec>

		<exec executable="make" dir="${src.shvm.agent}/javahome">
			<arg value="clean" />
		</exec>
		<exec executable="make" dir="${src.shvm.agent}">
			<arg value="clean" />
		</exec>
	</target>

</project>
