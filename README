DiSL
====

DiSL is inspired by AOP, but in contrast to mainstream AOP languages, it features
an open join point model where any region of bytecodes can be selected as a join
point (i.e., code location to be instrumented). DiSL reconciles high-level
language constructs resulting in concise instrumentations, high expressiveness,
and efficiency of the inserted instrumentation code. Thanks to the
pointcut/advice model adopted by DiSL, instrumentations are similarly compact as
aspects written in AspectJ. However, in contrast to AspectJ, DiSL does not
restrict the code locations that can be instrumented, and the code generated by
DiSL avoids expensive operations (such as object allocations that are not visible
to the programmer). Furthermore, DiSL supports instrumentations with complete
bytecode coverage out-of-the-box and avoids structural modifications of classes
that would be visible through reflection and could break the instrumented code.

link: http://forge.ow2.org/projects/disl/

INSTALL
=======

DiSL currently fully supports Linux with installed Java, ant, GCC and make.

To compile DiSL please run the "ant" command in the root directory. If "make" is
complaining about missing java headers, modify the Makefile.local.tmpl
accordingly.

EXAMPLES
========

For the basic instrumentation example, please look in the example directory.
Also the src-test directory contains simple examples of DiSL features.

DOCUMENTATION
=============

Please look at http://disl.projects.ow2.org/xwiki/bin/view/Main/Doc.

USER ERRORS
===========

If you get an java error during instrumentation or running your application,
please look at USERERRORS document describing most common problems.
